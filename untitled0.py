# index operator [] = gives access to sequence's element ( str, list, tuples)
""" 
name = "suman Gurung "
if (name[0].islower()): 
    name = name.capitalize()
print(name)


name = "Suman Gurung" 



first_name = name[0:12].upper()
print (first_name)

-----------------------------------------------------------------------------------------------------------------------


def hello(): 
    print ( "hello")

hello()
hello()
# this calls what is indie the hello function the number of tiems it is called 


-------------------------------------------------------------------------------------------------------------------------
def hello(dude): 
    print ( "hello"+ name)
    print("Have a nice day")

hello("Suman")

""the name in the first line and the name in the second line needs to be the same 
the first line can be chaanged to dude but that also means that the second liine name 
name needs to change into dude as well. 


-----------------------------------------------------------------------------------------------------------------------

def hello(name): 
    print ( "hello"+ name)
    print("Have a nice day")



the name in the first line and the name in the second line needs to be the same 
the first line can be chaanged to dude but that also means that the second liine name 
name needs to change into dude as well. 
the hello in the fourth line can be also anything
All that matters is that the number of parameters are the same.

hello("dude")
"""
"""

-------------------------------------------------------------------------------------------------------------------------
def hello(name): 
    print ( "hello"+ name)
    print("Have a nice day")

my_name = "bro"
hello(my_name) 
- with one value 
-----------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------
def hello(first_name,last_name): 
    print ( "hello "+first_name+ " " +last_name )
    print("Have a nice day")

hello("Bro", "Code")


- with two values
-----------------------------------------------------------------------------------------------------------------------
def hello ( first_name, last_name, age) : 
    print("hello "+first_name+" " + last_name)
    print("You are "+ str(age)+" years old" ) 
    print("Have a nice day!" ) 
    
hello("Suman", "Gurung", 21)

- matching three parameters with three parameters



-------------------------------------------------------------------------------------------------------------------------
def hello ( first_name, last_name, age) : 
    print("hello "+first_name+" " + last_name)
    print("You are "+ str(age)+" years old" ) 
    print("Have a nice day!" ) 
    
hello("Suman", "Gurung", 21)
-----------------------------------------------------------------------------------------------------------------------

n = 0 
while n > 0 : 
    print("Suman")
    print("Andrew")
print("Sidarth")

output: Sidarth


-------------------------------------------------------------------------------------------------------------------------
While loops 

i = 1
while i<=5: 
    print ("Python ", end= "")
    j = 1
    while j<=1: 
        print("rocks", end= "")
        j = j+1
        
    i +=1
    print()


output: Python rocks 
-----------------------------------------------------------------------------------------------------------------------
for loop 
for i in range (10,20):
    print (i)

output: 
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19

-------------------------------------------------------------------------------------------------------------------------
for i in range (10,20):
    print (i)
-----------------------------------------------------------------------------------------------------------------------

return statements = Functions send Python values/objects back to the caller.
These values/objects are known as the functions return value



def multiply (number1, number2): 
    return number1 * number2

x= multiply(6,5)
print(x)

output: 30 

-----------------------------------------------------------------------------------------------------------------------
keyword arguments = arguments preceded by an identifier when we pass them to a function. 
The order of the arguments does not matter, unlike positional arguments. 
Python knows the names of the arguments that our function receives
 


def hello (first, middle, last): 
    print("Hello " + first+" "+middle+ " "+ last)
    
hello ("Code", "Dude", "Bro")


output: Hello Code Dude Bro


-------------

def hello (first, middle, last): 
    print("Hello " + first+" "+middle+ " "+ last)
    
hello (last="Code", middle="Dude", first="Bro")


output: Hello Bro Dude Code


-----------------------------------------------------------------------------------------------------------------------

nested function calls = function calls inside other function calls 
innermost function calls are resolved first 
returned value is used as argument for the next outer function

-----
num = input("Enter a whole positive number: ")
num = float(num) 
num= abs(num) 
num = round(num) 
print(num)
-------------
print(round(abs(float(input("Enter a whole positive number: ")))))


-----------------------------------------------------------------------------------------------------------------------

largest_so_far = -1
print('Before', largest_so_far)
for the_num in [9, 41, 12, 3, 74, 15, 76.34] :
   if the_num > largest_so_far :
      largest_so_far = the_num
   print(largest_so_far, the_num)
print('After', largest_so_far)

-----------------------------------------------------------------------------------------------------------------------

 scope = The region that a variable is recognized
 A variable is only aviable from inside the reigion it is created. 
 A global and locally scoped version of a varibale can be created




name = "Suman" = global scope ( avaliable inside & outisde function)

def display_name(): 
    name = "Gurung"  = local scope
    print(name)


print(name)

- can call the local version if you put in a line above the global scope

-----------------------------------------------------------------------------------------------------------------------
*args = parameter that will pack all arguments into a tuple
- useful so that a function can accept a verying amount of arguments





def add (*args):
    sum = 0 
    for i in args: 
        sum+= i
    return sum
    
    
    
print(add(1,2,3)) 

- you can name args to anything but the * needs to be there

def add (*stuff):
    sum = 0 
    stuff = list(stuff)
    stuff[0] = 0 
    for i in stuff: 
        sum+= i
    return sum
    
    
    
print(add(1,2,3,4,5,6)) 


output: 20



-----------------------------------------------------------------------------------------------------------------------

**kwargs = parameter that will pack all arguemnts into a dictionary 
- useful so that a function can accept a varying amount o keyword arguments




def hello (**kwargs):
    #print("Hello" + kwargs["first] + " " + kwargs ["last"]
    print("Hello", end = " ")
    for key, value in kwargs.items():
        print(value, end = " ")
                          
hello (title="Mr.",first= "Suman", middle = "Khana", last="Gurung")


output: Hello Mr. Suman Khana Gurung 

-- it does not be named kwargs, you do need to have ** 


-----------------------------------------------------------------------------------------------------------------------
str.format() = optional method that gives users 
more control when displaying output
- this works in order
- the :10 gives you space after the sentence is ended.


animal = "cow"
item = "moon "

#print("The {} jumped over the {}".format(animal, item))
#print("the {1} jumped over the {1}".format(animal,item)) - positional argument
#print("The {animal} jumped over the {animal}".formal(animal="cow", item="moon"))- keywords


text = " The {} jumped over te {}"

print(text.format(animal, item))



-------


name = "Suman"

print("Hello, my name is {}".format(name))
print("Hello, my name is {:10}. Nice to meet you".format(name))
print("Hello, my name is {:<10}. Nice to meet you".format(name))
print("Hello, my name is {:>10}. Nice to meet you".format(name))
print("Hello, my name is {:^10}. Nice to meet you".format(name))

------ 

number = 3.14159

print("The number pi is {:.2f}".format(number))

-----------------------------------------------------------------------------------------------------------------------
import random 



x = random.randint(1,6)
y = random.random()
print(x)


-------
import random 



x = random.randint(1,6)
y = random.random()


myList = ["rock", "paper", "scissors"]
z = random.choice(myList)



cards = [1,2,3,4,5,6,7,8,9,"J", "K", "Q", "A"]
random.shuffle(cards)

print(cards)


-----------------------------------------------------------------------------------------------------------------------

exception = events detected during execution that interrupt tht flow of a program

- make sure to have multiple exception blocks


try: 
    numerator = int(input("Enter a number to divide: "))
    denominator = int(input("Enter a number to divide by: "))
    result = numerator/ denominator
    
   
except ZeroDivisionError as e: 
    print(e)
    print("Can't divide")
except ValueError as e:
    print(e)
    print("Enter only #")
except Exception as e:
    print(e)
    print("something went wrong")
    
else: 
    print(result)
finally: 
    print(" This will always exceute")
        
-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------v-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------




-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------------------------------